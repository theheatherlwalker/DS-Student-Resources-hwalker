help(mtcars)
setwd("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R")
install.packages("dplyr")
library("dplyr")
arrange(mtcars, hp)
ggplot(stress_relief, aes(x - MeditationYN, y = BloodPressure)) + geom_boxplot(aes(group=MeditationYN))
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
ggplot(stress_relief, aes(x - MeditationYN, y = BloodPressure)) + geom_boxplot(aes(group=MeditationYN))
ggplot(stress_relief, aes(x = MeditationYN, y = BloodPressure)) + geom_boxplot(aes(group=MeditationYN))
mtcars
# loading R's built-in data sets
library(datasets)
mtcars
View(mtcars)
# create box plot of `mpg` grouped by `cyl`.
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_boxplot(aes(group=cyl))
# create box plot of `mpg` grouped by `cyl`.
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_boxplot(aes(group=cyl)) +
# make the plot look better
ggtitle("Select 1973-74 Cars") + xlab("Number of Engine Cylinders") + ylab("Number of Cars")
# create box plot of `mpg` grouped by `cyl`.
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_boxplot(aes(group=cyl)) +
# make the plot look better
ggtitle("Select 1973-74 Cars from U.S.") + xlab("Number of Engine Cylinders") + ylab("Miles per Gallon (mpg)")
histogram.rivers + geom_histogram(binwidth = 298, fill = "skyblue3", color = "dodgerblue4") +
ggtitle("Major North American Rivers") + xlab("Length (in miles)") + ylab("Number of Rivers")
# summarize count of cars by group: 4 cyl, 6 cyl, and 8 cyl.
mtcars %>% group_by(cyl) %>% summarize(count = n())
# create box plot of `mpg` grouped by `cyl`.
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_boxplot(aes(group=cyl)) +
# make the plot look better
ggtitle("Select 1973-74 Cars from U.S.") + xlab("Number of Engine Cylinders") + ylab("Miles per Gallon (mpg)")
# 1. import the data
read.csv("frostedflakes.csv")
setwd("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R")
# 1. import the data
read.csv("/data/frostedflakes.csv")
frostedflakes <- read.csv("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/Data/frostedflakes.csv", stringsAsFactors=TRUE)
View(frostedflakes)
setwd("/Users/heather/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/Data")
# check that we are in the correct working directory
getwd()
# 1. import the data
# the needed .csv is already in the GitHub folder
# I do NOT want to reset my working directory...
# instead, read csv from file path
file <- "/Users/heather/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/Data/frostedflakes.csv"
data <- read.csv(file)
# 2. view the first 6 rows of data frame
head(frostedflakes)
library(datasets)
LakeHuron
lake_obj <- t.test(frostedflakes$Lab, mu = 577)
print(lake_obj)
lake_obj <- t.test(LakeHuron, mu = 577)
print(lake_obj)
# loading DAAG package
library(DAAG)
library(DAAG)
# loading DAAG package
library("DAAG")
# loading DAAG package
install.packages("DAAG")
library(DAAG)
View(greatLakes) # to view in RStudio as a table.
# Load data
install.packages("DAAG") # need to install the package first
library(DAAG) # call the library
View(greatLakes) # to view in RStudio as a table.
# Create vectors
erie <- greatLakes[,1]
huron <- greatLakes[,2]
# Create hypothesis test
# null hypothesis : \mu1 = \mu2
# alternative hypothesis :  \mu1 \neq \mu2
# Run t-test
t_ind <- t.test(erie, huron, alternative="two.sided", var.equal=FALSE)
print(t_ind)
install.packages("DAAG")
# Create vectors
erie <- greatLakes[,1]
library(DAAG) # call the library
View(greatLakes) # to view in RStudio as a table.
# Create vectors
erie <- greatLakes[,1]
huron <- greatLakes[,2]
# Run t-test
t_ind <- t.test(erie, huron, alternative="two.sided", var.equal=FALSE)
print(t_ind)
# Import the data
# read from path (instead of changing working directory)
file <- "/Users/heather/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/scores.csv"
data <- read.csv(file)
# Read the data into a data frame
scores <- read.csv("scores.csv")
# Import the data
# read from path (instead of changing working directory)
file <- "/Users/heather/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/scores.csv"
data <- read.csv(file)
# Read the data into a data frame
scores <- read.csv("scores.csv")
# Import the data
# read from path (instead of changing working directory)
file <- "/Users/heather/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/scores.csv"
# Read the data into a data frame
scores <- read.csv(file)
head(scores) # prints the first 6 rows
# Perform t-test on the 2 samples
t_dep <- t.test(scores$postest, scores$pretest, paired = TRUE)
t_dep
# Graphing data for the dependent t-test
# will need to specify variables used in melt()
library(reshape2) # call library
ss <- melt(scores, measure.vars = c("pretest", "postest"))
# Make box plots of pretest and postest data values
ggplot(ss) + geom_boxplot(aes(x = variable, y = value)) +
xlab("Test") + ylab("Score")
# Make box plots of pretest and postest data values
library(ggplot2) # call ggplot2
ggplot(ss) + geom_boxplot(aes(x = variable, y = value)) +
xlab("Test") + ylab("Score")
# Another way to graph
# compute difference between postest and pretest for each student
# graph on histogram
dd <- scores$postest - scores$pretest
df <- data.frame(dd)
ggplot(df, aes(x = dd)) + geom_histogram(binwidth = 1) +
xlab("Difference between postest and pretest")
# loading R's built-in data sets
library(datasets)
View(nhtemp) # to view in RStudio as a table.
nhtemp
# loading R's built-in data sets
library(datasets)
nhtemp
# Create 2 vectors
first25 <- nhtemp[1:25]
last25 <- nhtemp[36:60]
# Compute Dependent t-test on the 2 samples
t_dep <- t.test(first25, last25, paired = TRUE)
t_dep
# Compute Dependent t-test on the 2 samples
t_dep <- t.test(first25, last25, paired = TRUE)
t_dep
# Graphing data for the dependent t-test
library(reshape2) # call library
temps_plot <- melt(nhtemp, id="X")
# Graphing data for the dependent t-test
library(reshape2) # call library
temps_plot <- melt(nhtemp, id="X")
# Make box plots
library(ggplot2) # call ggplot2
ggplot(temps_plot) + geom_boxplot(aes(x = variable, y = value)) +
xlab("Year") + ylab("Temperature")
# Graphing data for the dependent t-test
library(reshape2) # call library
temps_plot <- melt(nhtemp, id="X")
temps_plot
View(nhtemp)
nhtemp
# loading R's built-in data sets
library(datasets)
nhtemp
# Create 2 vectors
first25 <- nhtemp[1:25]
last25 <- nhtemp[36:60]
# Compute Dependent t-test on the 2 samples
t_dep <- t.test(first25, last25, paired = TRUE)
t_dep
